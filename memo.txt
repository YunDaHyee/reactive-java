java2

빅데이터
객체지향DB..3등DB인 오라클만 살아남음.
웹에서 관계형 DB만 있으면 됨

- 빅데이터 시대 이전
DB에 데이터 저장
바닥 : java
배달 매개체 - Quieryt

- 빅데이터 시대 이후
오라클취약점 : - 대량DB는 안됨
데ㅐ량 DB를 위해 NoSQL 사용
데이터 Lake
오라클만 있ㅇ ㅡㅁ안디ㅗ고  대량 ㄷ데이터를 ㅈ\

함수형프로구ㅡ래밍: 데이터 처리에 적합기법
WKQKSMS DLK[

하위호완성떄무네 자바는 못씀
자바 대체 히들다..
함수형프로그ㅜㄱ래ㅣㅇ - 데이터처리에 적합기법, 데이터를 변경불가하게 처리하는 기법..빅데이터 세상과 ㅁ잘 맞아떨으뜨림.
함수형프로그램 지원하느 언어중 가장 느게자부\|ㅈ\1ㄱㄱ
객체지향언어ㅔ에서 람다라는 언어를 쓴다.ㅔ

오픈JDK
자바8~ : 모던자바 - 런모듈자바의 마지막자바.
~자바8 : 클래식자바
~ 1.9 : 런모듈
1.9~ : 모듈러자바. 이후는 다 호환됨.

시초에는 자바 기본 라이브러리를 통으로 만듬..근데 전자정부 프레임워크가 되어쓰니까 모듈화를 시키자고 직쏘프레임워크가 됨..
모듈러자바 마ㅓㄴ들겠다고 1.3부터
자바1.9 : 함수ㅕ형 프로그래밍 관련해서 추가된 것들이 있음...

1년에 두번씩 버전업 되는데
짝수에서 테스트 하는거고 홀수에서 LTS가 됨.
홀짝제..

요즘 클라우드로 하다보니까 AWS 이런 데에서도 JDK를 냄.


=====
8/17

연산자 볼 때 마블다이어그램 보고 이해하기 !!

=> : Observer
-> : 

filter - 연산자 거쳐서 소실될 건 소실됨. 데이터 형태는 그대로, 데이터개수가 변경됨
map - 함수를 적용(apply)해서 데이터 형태가 바뀌고, 데이터 개수는 그대로

마블다이어그램을 보고 이해하기
Observer - 데이터 보유자
Observer - 데이터를 가지고 사용하는 애. 운반하는 애라고 생각하기

데이터를 기다리는 게 아니라 이벤트 발생하면 바로 반응(reactive).


				 

데이터를 처리한다 == 분석한다.
데이터를 가지고 분석해서 가치 뽑아먹으려고 하는 것.

결합해서 하나의 Observable로 사용할 수 잇음.

체이닝형태의 코드 구성 = 빌드업 패턴
그러려면 데이터가 immutable 해야함.
최신 데이터를 처리하는 솔루션에서는 다 그럼
작업하면 변경된 복사본이 반환되는거야.
중간연산자를 통해 결과물을 한번에 내는 게 아니라 파이프라인으로 하나씩 바꿔나가는 것임.
그럼 데이터를 이전으로 복원하기 쉬움

Spring은 RxJava가 아니고 Reactor 씀.(RxJava 활용해서 새로 만든 거)
RxJava는 안드로이드 개발할 때 마니 쓰는데 RxKotlin,,,kotlinFlow
백엔드 기준으ㅜ로 앞,뒤 다 reacitve 해야 리액티브 시스템임.
웹 단 : WebFlux
DB랑 연동하는 쪽 : R2DBC
그래서 스프링에서는 앞,뒤 다 리액티브하게 할 수 잇게 기반이 되어잇음.
근ㄷ ㅔ Rxjava가 아닌 Reactor 쓴다는 것.

Reactor Core : Reactive Stream.. 8 이상에서만 동작.

리액티브방식으로 쓰려면 webFlux
과거의 방식으로 스려면 SpringMvc

=====

8/18

# Reactor
- Spring이 RxJava 이후에 만든, RxJava를 근본으로 만든 최신 라이브러리.
- RxJava보다 연산자가 풍부하다.
- Spring 깔면 내장 되어있어서 따로 안깔아도 되긴 함.
	Spring에서 써야함. 별도로 쓸 일은 없을 것이다. (스프링에서 reactive 프로그래밍응ㄹ 해야한다.)
- 메뉴얼 잘 보기

## Flux
RxJava의 Observerble 같은 것.
데이터 많이 갖고 잇느 ㄴ것.
- MathFlux : 수학연산 관련된 연산자를 가진 클래스

## Mono
하나의 데이터를 처리할 수 있는 것.
하나 또는 제로.

데이터에 대해 어플리케이션에도 일부적으로 쿼리같이 처리할 수 잇어야 한다는 관점

